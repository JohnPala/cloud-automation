- name: Set fact for certManager tempdir
  set_fact:
    certManagerTempDir: "/tmp/certManager-{{ ansible_date_time.iso8601_basic_short }}"
  tags:
    - certManager

- name: Get external-dns secret from KeyVault
  shell: "az keyvault secret show --vault kv-{{ environmentShort }}-{{ locationShort }}-{{ configuration.coreResourceGroupName }} --name dns-secret --output json"
  register: certManagerSecret
  when:
    - configuration.certManager.letsEncryptEnabled
  tags:
    - certManager

- name: Set Azure facts for certManager
  set_fact:
    cmAzure: "{{ (certManagerSecret.stdout | from_json).value | b64decode | from_json }}"
  when:
    - configuration.certManager.letsEncryptEnabled
  tags:
    - certManager

- name: Configure CAA record
  azure_rm_resource:
    resource_group: "{{ resourceGroupName }}"
    provider: Network
    resource_type: dnsZones
    resource_name: "{{ externalDnsZone }}/CAA/@"
    api_version: "2018-05-01"
    method: PUT
    body:
      properties:
        caaRecords:
          - tag: issue
            flags: 0
            value: letsencrypt.org
        TTL: 3600
  when:
    - configuration.certManager.letsEncryptEnabled
    - configuration.certManager.state == "present"
  tags:
    - certManager

- name: Download and apply helm template
  block:
    - name: Create certManager temp dir
      file:
        path: "{{ certManagerTempDir }}"
        state: directory
        mode: 0755
      changed_when: false
      tags:
        - certManager

    - name: Add certManager namespace
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ configuration.certManager.namespace }}"
            labels: "{{ configuration.certManager.labels | combine({'name': configuration.certManager.namespace}) }}"
      when: configuration.certManager.state == "present"
      tags:
        - certManager

    - name: Helm repo add jetstack
      shell: "{{ helm.binDir }}/helmv3 repo add jetstack https://charts.jetstack.io"
      tags:
        - certManager

    - name: Helm repo update
      shell: "{{ helm.binDir }}/helmv3 repo update"
      tags:
        - certManager

    - name: Copy certManager-values.yaml.j2 manifest jinja2 templates
      template:
        src: "certManager-values.yaml.j2"
        dest: "{{ certManagerTempDir }}/certManager-values.yaml"
      changed_when: false
      tags:
        - certManager

    - name: Install certManager
      shell: '{{ helm.binDir }}/helmv3 -f {{ certManagerTempDir }}/certManager-values.yaml --kubeconfig="{{ configuration.k8sconfiguration.dest }}" upgrade --wait --install --version {{ configuration.certManager.helmChartVersion }} --namespace {{ configuration.certManager.namespace }} {{ configuration.certManager.helmChartName }} jetstack/cert-manager'
      register: certManagerInstallResult
      when: configuration.certManager.state == "present"
      tags:
        - certManager

    - name: Restart certManager deployment
      shell: '{{ kubectl.bin_directory }}/kubectl --kubeconfig="{{ configuration.k8sconfiguration.dest }}" --namespace={{ configuration.certManager.namespace }} rollout restart deployment {{ configuration.certManager.helmChartName }}'
      when: configuration.certManager.state == "present"
      tags:
        - certManager

    - name: Remove certManager
      shell: '{{ helm.binDir }}/helmv3 --kubeconfig="{{ configuration.k8sconfiguration.dest }}" --namespace {{ configuration.certManager.namespace }} uninstall {{ configuration.certManager.helmChartName }}'
      when: configuration.certManager.state == "absent"
      tags:
        - certManager

    - name: Remove certManager namespace
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: absent
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ configuration.certManager.namespace }}"
      when: configuration.certManager.state == "absent"
      tags:
        - certManager

    - name: Delete temporary local folder
      file:
        path: "{{ certManagerTempDir }}/"
        state: absent
      changed_when: false
      tags:
        - certManager

  rescue:
    - name: Delete temporary local folder
      file:
        path: "{{ certManagerTempDir }}/"
        state: absent
      changed_when: false
      tags:
        - certManager

    - name: Fail task
      fail:
        msg: "Rescue was invoked, task failed."
      tags:
        - certManager

- name: Create secret for cert-manager AzureDNS
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "present"
    namespace: "{{ configuration.certManager.namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: azuredns-config
      type: Opaque
      data:
        CLIENT_SECRET: "{{ cmAzure.aadClientSecret | b64encode }}"
  when:
    - configuration.certManager.letsEncryptEnabled
    - configuration.certManager.state == "present"
  tags:
    - certManager

- name: Add cert-manager cluster issuer - letsencrypt-prod
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "present"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: "webmaster@{{ externalDnsZone }}"
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            - dns01:
                azuredns:
                  clientID: "{{ cmAzure.aadClientId }}"
                  clientSecretSecretRef:
                    name: azuredns-config
                    key: CLIENT_SECRET
                  subscriptionID: "{{ cmAzure.subscriptionId }}"
                  tenantID: "{{ cmAzure.tenantId }}"
                  resourceGroupName: "{{ cmAzure.resourceGroup }}"
                  hostedZoneName: "{{ externalDnsZone }}"
  when:
    - configuration.certManager.letsEncryptEnabled
    - configuration.certManager.state == "present"
  register: certManagerIssuerResult
  retries: 20
  delay: 30
  until: certManagerIssuerResult is succeeded
  tags:
    - certManager


- name: Add cert-manager cluster issuer - selfsigning-issuer
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "present"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: selfsigning-issuer
      spec:
        selfSigned: {}
  when:
    - configuration.certManager.internalCaEnabled
    - configuration.certManager.state == "present"
  register: certManagerIssuerResult
  retries: 20
  delay: 30
  until: certManagerIssuerResult is succeeded
  tags:
    - certManager

- name: Add root ca certificate for internal-root-ca
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "present"
    namespace: "{{ configuration.certManager.namespace }}"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: Certificate
      metadata:
        name: internal-root-ca
      spec:
        secretName: internal-root-ca
        commonName: "Internal Root CA"
        duration: 219000h # 9125d / 25y
        keyAlgorithm: ecdsa
        isCA: true
        issuerRef:
          name: selfsigning-issuer
          kind: ClusterIssuer
  when:
    - configuration.certManager.internalCaEnabled
    - configuration.certManager.state == "present"
  register: certManagerIssuerResult
  retries: 20
  delay: 30
  until: certManagerIssuerResult is succeeded
  tags:
    - certManager

- name: Add ClusterIssuer for root ca certificate (internal-root-ca)
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "present"
    namespace: "{{ configuration.certManager.namespace }}"
    definition:
      apiVersion: cert-manager.io/v1alpha2
      kind: ClusterIssuer
      metadata:
        name: internal-root-ca
      spec:
        ca:
          secretName: "internal-root-ca"
  when:
    - configuration.certManager.internalCaEnabled
    - configuration.certManager.state == "present"
  register: certManagerIssuerResult
  retries: 20
  delay: 30
  until: certManagerIssuerResult is succeeded
  tags:
    - certManager